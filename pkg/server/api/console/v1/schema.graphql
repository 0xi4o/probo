directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goEnum(value: String) on ENUM_VALUE

scalar CursorKey
scalar Void
scalar Datetime
scalar Upload
scalar Duration

interface Node {
  id: ID!
}

enum MitigationState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.MitigationState") {
  NOT_STARTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationStateNotStarted"
    )
  IN_PROGRESS
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationStateInProgress"
    )
  NOT_APPLICABLE
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationStateNotApplicable"
    )
  IMPLEMENTED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationStateImplemented"
    )
}

enum TaskState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.TaskState") {
  TODO @goEnum(value: "github.com/getprobo/probo/pkg/coredata.TaskStateTodo")
  DONE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.TaskStateDone")
}

enum EvidenceState
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.EvidenceState") {
  VALID
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.EvidenceStateValid")
  INVALID
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.EvidenceStateInvalid"
    )
  EXPIRED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.EvidenceStateExpired"
    )
}

enum PeopleKind
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.PeopleKind") {
  EMPLOYEE
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.PeopleKindEmployee")
  CONTRACTOR
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleKindContractor"
    )
  SERVICE_ACCOUNT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleKindServiceAccount"
    )
}

enum MitigationImportance
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.MitigationImportance"
  ) {
  MANDATORY
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationImportanceMandatory"
    )
  PREFERRED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationImportancePreferred"
    )
  ADVANCED
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationImportanceAdvanced"
    )
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: CursorKey
  endCursor: CursorKey
}

type OrganizationConnection {
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

type OrganizationEdge {
  cursor: CursorKey!
  node: Organization!
}

type Organization implements Node {
  id: ID!
  name: String!
  logoUrl: String @goField(forceResolver: true)

  users(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: UserOrder
  ): UserConnection! @goField(forceResolver: true)

  frameworks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: FrameworkOrder
  ): FrameworkConnection! @goField(forceResolver: true)

  vendors(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: VendorOrder
  ): VendorConnection! @goField(forceResolver: true)

  peoples(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: PeopleOrder
  ): PeopleConnection! @goField(forceResolver: true)

  policies(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: PolicyOrder
  ): PolicyConnection! @goField(forceResolver: true)

  mitigations(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: MitigationOrder
  ): MitigationConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

enum OrderDirection
  @goModel(model: "github.com/getprobo/probo/pkg/page.OrderDirection") {
  ASC @goEnum(value: "github.com/getprobo/probo/pkg/page.OrderDirectionAsc")
  DESC @goEnum(value: "github.com/getprobo/probo/pkg/page.OrderDirectionDesc")
}

enum PeopleOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.PeopleOrderField") {
  FULL_NAME
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleOrderFieldFullName"
    )
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.PeopleOrderFieldCreatedAt"
    )
}

enum VendorOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.VendorOrderField") {
  NAME
}

enum FrameworkOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.FrameworkOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.FrameworkOrderFieldCreatedAt"
    )
}

enum ControlOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.ControlOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ControlOrderFieldCreatedAt"
    )
}

enum MitigationOrderField
  @goModel(
    model: "github.com/getprobo/probo/pkg/coredata.MitigationOrderField"
  ) {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.MitigationOrderFieldCreatedAt"
    )
}

enum TaskOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.TaskOrderField") {
  CREATED_AT
}

enum PolicyOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.PolicyOrderField") {
  NAME
}

enum EvidenceOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.EvidenceOrderField") {
  CREATED_AT
}

input PeopleOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.PeopleOrderBy"
  ) {
  direction: OrderDirection!
  field: PeopleOrderField!
}

input VendorOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.VendorOrderBy"
  ) {
  direction: OrderDirection!
  field: VendorOrderField!
}

input FrameworkOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.FrameworkOrderBy"
  ) {
  direction: OrderDirection!
  field: FrameworkOrderField!
}

input ControlOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.ControlOrderBy"
  ) {
  direction: OrderDirection!
  field: ControlOrderField!
}

input MitigationOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.MitigationOrderBy"
  ) {
  direction: OrderDirection!
  field: MitigationOrderField!
}

input TaskOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.TaskOrderBy"
  ) {
  direction: OrderDirection!
  field: TaskOrderField!
}

input PolicyOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.PolicyOrderBy"
  ) {
  direction: OrderDirection!
  field: PolicyOrderField!
}

input EvidenceOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.EvidenceOrderBy"
  ) {
  direction: OrderDirection!
  field: EvidenceOrderField!
}

type PeopleConnection {
  edges: [PeopleEdge!]!
  pageInfo: PageInfo!
}

type PeopleEdge {
  cursor: CursorKey!
  node: People!
}

type People implements Node {
  id: ID!
  fullName: String!
  primaryEmailAddress: String!
  additionalEmailAddresses: [String!]!
  kind: PeopleKind!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type VendorConnection {
  edges: [VendorEdge!]!
  pageInfo: PageInfo!
}

type VendorEdge {
  cursor: CursorKey!
  node: Vendor!
}

type Vendor implements Node {
  id: ID!
  name: String!
  description: String!
  serviceStartAt: Datetime!
  serviceTerminationAt: Datetime
  serviceCriticality: ServiceCriticality!
  riskTier: RiskTier!
  statusPageUrl: String
  termsOfServiceUrl: String
  privacyPolicyUrl: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type FrameworkConnection {
  edges: [FrameworkEdge!]!
  pageInfo: PageInfo!
}

type FrameworkEdge {
  cursor: CursorKey!
  node: Framework!
}

type Framework implements Node {
  id: ID!
  name: String!
  description: String!

  controls(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: ControlOrder
  ): ControlConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type ControlConnection {
  edges: [ControlEdge!]!
  pageInfo: PageInfo!
}

type ControlEdge {
  cursor: CursorKey!
  node: Control!
}

type Control implements Node {
  id: ID!
  referenceId: String!
  name: String!
  description: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type MitigationConnection {
  edges: [MitigationEdge!]!
  pageInfo: PageInfo!
}

type MitigationEdge {
  cursor: CursorKey!
  node: Mitigation!
}

type Mitigation implements Node {
  id: ID!
  category: String!
  name: String!
  description: String!
  state: MitigationState!
  importance: MitigationImportance!

  tasks(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: TaskOrder
  ): TaskConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: CursorKey!
  node: Task!
}

type Task implements Node {
  id: ID!
  name: String!
  description: String!
  state: TaskState!
  timeEstimate: Duration
  assignedTo: People @goField(forceResolver: true)

  evidences(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: EvidenceOrder
  ): EvidenceConnection! @goField(forceResolver: true)

  createdAt: Datetime!
  updatedAt: Datetime!
}

type EvidenceConnection {
  edges: [EvidenceEdge!]!
  pageInfo: PageInfo!
}

type EvidenceEdge {
  cursor: CursorKey!
  node: Evidence!
}

enum EvidenceType
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.EvidenceType") {
  FILE @goEnum(value: "github.com/getprobo/probo/pkg/coredata.EvidenceTypeFile")
  LINK @goEnum(value: "github.com/getprobo/probo/pkg/coredata.EvidenceTypeLink")
}

type Evidence implements Node {
  id: ID!
  fileUrl: String @goField(forceResolver: true)
  mimeType: String!
  size: Int!
  state: EvidenceState!
  type: EvidenceType!
  filename: String!
  url: String
  description: String!

  createdAt: Datetime!
  updatedAt: Datetime!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: CursorKey!
  node: User!
}

type User implements Node {
  id: ID!
  fullName: String!
  email: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type Session {
  id: ID!
  expiresAt: Datetime!
}

type Query {
  node(id: ID!): Node!
  viewer: Viewer!
}

type Viewer {
  id: ID!

  user: User!

  organizations(
    first: Int
    after: CursorKey
    last: Int
    before: CursorKey
    orderBy: OrganizationOrder
  ): OrganizationConnection! @goField(forceResolver: true)
}

type Mutation {
  createVendor(input: CreateVendorInput!): CreateVendorPayload!
  updateVendor(input: UpdateVendorInput!): UpdateVendorPayload!
  deleteVendor(input: DeleteVendorInput!): DeleteVendorPayload!

  createPeople(input: CreatePeopleInput!): CreatePeoplePayload!
  updatePeople(input: UpdatePeopleInput!): UpdatePeoplePayload!
  deletePeople(input: DeletePeopleInput!): DeletePeoplePayload!

  createOrganization(
    input: CreateOrganizationInput!
  ): CreateOrganizationPayload!
  updateOrganization(
    input: UpdateOrganizationInput!
  ): UpdateOrganizationPayload!
  deleteOrganization(
    input: DeleteOrganizationInput!
  ): DeleteOrganizationPayload!

  createTask(input: CreateTaskInput!): CreateTaskPayload!
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload!
  deleteTask(input: DeleteTaskInput!): DeleteTaskPayload!
  assignTask(input: AssignTaskInput!): AssignTaskPayload!
  unassignTask(input: UnassignTaskInput!): UnassignTaskPayload!

  createFramework(input: CreateFrameworkInput!): CreateFrameworkPayload!
  updateFramework(input: UpdateFrameworkInput!): UpdateFrameworkPayload!
  importFramework(input: ImportFrameworkInput!): ImportFrameworkPayload!
  deleteFramework(input: DeleteFrameworkInput!): DeleteFrameworkPayload!

  createMitigation(input: CreateMitigationInput!): CreateMitigationPayload!
  updateMitigation(input: UpdateMitigationInput!): UpdateMitigationPayload!

  uploadEvidence(input: UploadEvidenceInput!): UploadEvidencePayload!
  deleteEvidence(input: DeleteEvidenceInput!): DeleteEvidencePayload!

  createPolicy(input: CreatePolicyInput!): CreatePolicyPayload!
  updatePolicy(input: UpdatePolicyInput!): UpdatePolicyPayload!
  deletePolicy(input: DeletePolicyInput!): DeletePolicyPayload!

  confirmEmail(input: ConfirmEmailInput!): ConfirmEmailPayload!
  inviteUser(input: InviteUserInput!): InviteUserPayload!
  removeUser(input: RemoveUserInput!): RemoveUserPayload!
}

input CreateVendorInput {
  organizationId: ID!
  name: String!
  description: String!
  serviceStartAt: Datetime!
  serviceTerminationAt: Datetime
  serviceCriticality: ServiceCriticality!
  riskTier: RiskTier!
  statusPageUrl: String
  termsOfServiceUrl: String
  privacyPolicyUrl: String
}

input DeleteVendorInput {
  vendorId: ID!
}

input DeletePeopleInput {
  peopleId: ID!
}

input CreatePeopleInput {
  organizationId: ID!
  fullName: String!
  primaryEmailAddress: String!
  additionalEmailAddresses: [String!]
  kind: PeopleKind!
}

input UpdatePeopleInput {
  id: ID!
  fullName: String
  primaryEmailAddress: String
  additionalEmailAddresses: [String!]
  kind: PeopleKind
}

enum ServiceCriticality
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.ServiceCriticality") {
  LOW
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ServiceCriticalityLow"
    )
  MEDIUM
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ServiceCriticalityMedium"
    )
  HIGH
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.ServiceCriticalityHigh"
    )
}

enum RiskTier
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.RiskTier") {
  CRITICAL
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.RiskTierCritical")
  SIGNIFICANT
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.RiskTierSignificant")
  GENERAL
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.RiskTierGeneral")
}

input UpdateVendorInput {
  id: ID!
  name: String
  description: String
  serviceStartAt: Datetime
  serviceTerminationAt: Datetime
  serviceCriticality: ServiceCriticality
  riskTier: RiskTier
  statusPageUrl: String
  termsOfServiceUrl: String
  privacyPolicyUrl: String
}

type CreatePeoplePayload {
  peopleEdge: PeopleEdge!
}

type CreateVendorPayload {
  vendorEdge: VendorEdge!
}

type DeleteVendorPayload {
  deletedVendorId: ID!
}

type DeletePeoplePayload {
  deletedPeopleId: ID!
}

input CreateOrganizationInput {
  name: String!
}

input UpdateOrganizationInput {
  organizationId: ID!
  name: String
  logo: Upload
}

input DeleteOrganizationInput {
  organizationId: ID!
}

type CreateOrganizationPayload {
  organizationEdge: OrganizationEdge!
}

type UpdateOrganizationPayload {
  organization: Organization!
}

type DeleteOrganizationPayload {
  deletedOrganizationId: ID!
}

input CreateTaskInput {
  mitigationId: ID!
  name: String!
  description: String!
  timeEstimate: Duration
  assignedToId: ID
}

type CreateTaskPayload {
  taskEdge: TaskEdge!
}

input DeleteTaskInput {
  taskId: ID!
}

type DeleteTaskPayload {
  deletedTaskId: ID!
}

input DeleteFrameworkInput {
  frameworkId: ID!
}

type DeleteFrameworkPayload {
  deletedFrameworkId: ID!
}

input CreateFrameworkInput {
  organizationId: ID!
  name: String!
  description: String!
}

input UpdateFrameworkInput {
  id: ID!
  name: String
  description: String
}

type CreateFrameworkPayload {
  frameworkEdge: FrameworkEdge!
}

input CreateMitigationInput {
  organizationId: ID!
  name: String!
  description: String!
  category: String!
  importance: MitigationImportance!
}

type CreateMitigationPayload {
  mitigationEdge: MitigationEdge!
}

type UpdateFrameworkPayload {
  framework: Framework!
}

type UpdateVendorPayload {
  vendor: Vendor!
}

type UpdatePeoplePayload {
  people: People!
}

input UpdateMitigationInput {
  id: ID!
  name: String
  description: String
  category: String
  state: MitigationState
  importance: MitigationImportance
}

type UpdateMitigationPayload {
  mitigation: Mitigation!
}

input UploadEvidenceInput {
  taskId: ID!
  name: String!
  file: Upload
  type: EvidenceType!
  url: String
  description: String!
}

type UploadEvidencePayload {
  evidenceEdge: EvidenceEdge!
}

input DeleteEvidenceInput {
  evidenceId: ID!
}

type DeleteEvidencePayload {
  deletedEvidenceId: ID!
}

enum PolicyStatus
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.PolicyStatus") {
  DRAFT
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.PolicyStatusDraft")
  ACTIVE
    @goEnum(value: "github.com/getprobo/probo/pkg/coredata.PolicyStatusActive")
}

input CreatePolicyInput {
  organizationId: ID!
  name: String!
  content: String!
  status: PolicyStatus!
  reviewDate: Datetime
  ownerId: ID!
}

input UpdatePolicyInput {
  id: ID!
  name: String
  content: String
  status: PolicyStatus
  reviewDate: Datetime
  ownerId: ID
}

input DeletePolicyInput {
  policyId: ID!
}

type CreatePolicyPayload {
  policyEdge: PolicyEdge!
}

type UpdatePolicyPayload {
  policy: Policy!
}

type DeletePolicyPayload {
  deletedPolicyId: ID!
}

type Policy implements Node {
  id: ID!
  name: String!
  status: PolicyStatus!
  content: String!
  reviewDate: Datetime
  owner: People! @goField(forceResolver: true)
  createdAt: Datetime!
  updatedAt: Datetime!
}

type PolicyConnection {
  edges: [PolicyEdge!]!
  pageInfo: PageInfo!
}

type PolicyEdge {
  cursor: CursorKey!
  node: Policy!
}

input UpdateTaskInput {
  taskId: ID!
  name: String
  description: String
  state: TaskState
  timeEstimate: Duration
}

type UpdateTaskPayload {
  task: Task!
}

input ConfirmEmailInput {
  token: String!
}

type ConfirmEmailPayload {
  success: Boolean!
}

input ImportFrameworkInput {
  organizationId: ID!
  file: Upload!
}

type ImportFrameworkPayload {
  frameworkEdge: FrameworkEdge!
}

input AssignTaskInput {
  taskId: ID!
  assignedToId: ID!
}

type AssignTaskPayload {
  task: Task!
}

input UnassignTaskInput {
  taskId: ID!
}

type UnassignTaskPayload {
  task: Task!
}

input InviteUserInput {
  organizationId: ID!
  email: String!
  fullName: String!
}

type InviteUserPayload {
  success: Boolean!
}

input RemoveUserInput {
  organizationId: ID!
  userId: ID!
}

type RemoveUserPayload {
  success: Boolean!
}

enum OrganizationOrderField {
  NAME
  CREATED_AT
  UPDATED_AT
}

input OrganizationOrder {
  direction: OrderDirection!
  field: OrganizationOrderField!
}

enum UserOrderField
  @goModel(model: "github.com/getprobo/probo/pkg/coredata.UserOrderField") {
  CREATED_AT
    @goEnum(
      value: "github.com/getprobo/probo/pkg/coredata.UserOrderFieldCreatedAt"
    )
}

input UserOrder
  @goModel(
    model: "github.com/getprobo/probo/pkg/server/api/console/v1/types.UserOrderBy"
  ) {
  direction: OrderDirection!
  field: UserOrderField!
}
